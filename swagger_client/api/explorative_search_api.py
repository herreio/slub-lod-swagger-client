# coding: utf-8

"""
    LOD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExplorativeSearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def aggregate_top_authors_date_published_and_related_topics_around_topics(self, topics, **kwargs):  # noqa: E501
        """aggregate topAuthors, datePublished and relatedTopics around topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aggregate_top_authors_date_published_and_related_topics_around_topics(topics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] topics: multiple topics to aggregate (required)
        :param str author: use this specific author name as filter for the aggregation result
        :param str restrict: restrict all topic queries to occurrences with this restriction-topic
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.aggregate_top_authors_date_published_and_related_topics_around_topics_with_http_info(topics, **kwargs)  # noqa: E501
        else:
            (data) = self.aggregate_top_authors_date_published_and_related_topics_around_topics_with_http_info(topics, **kwargs)  # noqa: E501
            return data

    def aggregate_top_authors_date_published_and_related_topics_around_topics_with_http_info(self, topics, **kwargs):  # noqa: E501
        """aggregate topAuthors, datePublished and relatedTopics around topics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.aggregate_top_authors_date_published_and_related_topics_around_topics_with_http_info(topics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] topics: multiple topics to aggregate (required)
        :param str author: use this specific author name as filter for the aggregation result
        :param str restrict: restrict all topic queries to occurrences with this restriction-topic
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics', 'author', 'restrict']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aggregate_top_authors_date_published_and_related_topics_around_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics' is set
        if self.api_client.client_side_validation and ('topics' not in params or
                                                       params['topics'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `topics` when calling `aggregate_top_authors_date_published_and_related_topics_around_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'topics' in params:
            query_params.append(('topics', params['topics']))  # noqa: E501
            collection_formats['topics'] = 'multi'  # noqa: E501
        if 'author' in params:
            query_params.append(('author', params['author']))  # noqa: E501
        if 'restrict' in params:
            query_params.append(('restrict', params['restrict']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/explore/aggregations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def correlate_topics_with_their_mutual_occurances(self, topics, **kwargs):  # noqa: E501
        """correlate topics with their mutual occurances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.correlate_topics_with_their_mutual_occurances(topics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] topics: multiple topics to correlate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.correlate_topics_with_their_mutual_occurances_with_http_info(topics, **kwargs)  # noqa: E501
        else:
            (data) = self.correlate_topics_with_their_mutual_occurances_with_http_info(topics, **kwargs)  # noqa: E501
            return data

    def correlate_topics_with_their_mutual_occurances_with_http_info(self, topics, **kwargs):  # noqa: E501
        """correlate topics with their mutual occurances  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.correlate_topics_with_their_mutual_occurances_with_http_info(topics, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] topics: multiple topics to correlate (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topics']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method correlate_topics_with_their_mutual_occurances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topics' is set
        if self.api_client.client_side_validation and ('topics' not in params or
                                                       params['topics'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `topics` when calling `correlate_topics_with_their_mutual_occurances`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'topics' in params:
            query_params.append(('topics', params['topics']))  # noqa: E501
            collection_formats['topics'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/explore/correlations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_topics(self, q, **kwargs):  # noqa: E501
        """perform a simple serach on the topics index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_topics(q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: query string to search (required)
        :param int size: size of the response
        :param list[str] fields: list of internal elasticsearch fields to query against.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_topics_with_http_info(q, **kwargs)  # noqa: E501
        else:
            (data) = self.query_topics_with_http_info(q, **kwargs)  # noqa: E501
            return data

    def query_topics_with_http_info(self, q, **kwargs):  # noqa: E501
        """perform a simple serach on the topics index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_topics_with_http_info(q, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: query string to search (required)
        :param int size: size of the response
        :param list[str] fields: list of internal elasticsearch fields to query against.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'size', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if self.api_client.client_side_validation and ('q' not in params or
                                                       params['q'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `q` when calling `query_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/explore/topicsearch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
