# coding: utf-8

"""
    LOD API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchAndAccessApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_document_out_of_an_entity_type(self, id, entity_type, **kwargs):  # noqa: E501
        """get a single record of an entity-index, or search for all records containing this record as an attribute via isAttr parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_out_of_an_entity_type(id, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID-String of the record to access. Possible Values (examples):118695940, 130909696 (required)
        :param str entity_type: The name of the entity-type to access. Allowed Values: ['organizations', 'works', 'events', 'topics', 'persons', 'resources', 'geo']. (required)
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_document_out_of_an_entity_type_with_http_info(id, entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_out_of_an_entity_type_with_http_info(id, entity_type, **kwargs)  # noqa: E501
            return data

    def get_document_out_of_an_entity_type_with_http_info(self, id, entity_type, **kwargs):  # noqa: E501
        """get a single record of an entity-index, or search for all records containing this record as an attribute via isAttr parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_out_of_an_entity_type_with_http_info(id, entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID-String of the record to access. Possible Values (examples):118695940, 130909696 (required)
        :param str entity_type: The name of the entity-type to access. Allowed Values: ['organizations', 'works', 'events', 'topics', 'persons', 'resources', 'geo']. (required)
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'entity_type', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_out_of_an_entity_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_document_out_of_an_entity_type`")  # noqa: E501
        # verify the required parameter 'entity_type' is set
        if self.api_client.client_side_validation and ('entity_type' not in params or
                                                       params['entity_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity_type` when calling `get_document_out_of_an_entity_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'entity_type' in params:
            path_params['entity_type'] = params['entity_type']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{entity_type}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_in_index(self, entity_type, **kwargs):  # noqa: E501
        """search on one given entity-index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_in_index(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: The name of the entity-type to access. Allowed Values: ['organizations', 'works', 'events', 'topics', 'persons', 'resources', 'geo']. (required)
        :param str q: Lucene Query String Search Parameter
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :param int size: Configure the maxmimum amount of hits to be returned
        :param int _from: Configure the offset from the frist result you want to fetch
        :param str sort: how to sort the returned datasets. like: path_to_property:[asc|desc]
        :param str filter: filter the search by a defined value in a path. e.g. path_to_property:value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_in_index_with_http_info(entity_type, **kwargs)  # noqa: E501
        else:
            (data) = self.search_in_index_with_http_info(entity_type, **kwargs)  # noqa: E501
            return data

    def search_in_index_with_http_info(self, entity_type, **kwargs):  # noqa: E501
        """search on one given entity-index  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_in_index_with_http_info(entity_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str entity_type: The name of the entity-type to access. Allowed Values: ['organizations', 'works', 'events', 'topics', 'persons', 'resources', 'geo']. (required)
        :param str q: Lucene Query String Search Parameter
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :param int size: Configure the maxmimum amount of hits to be returned
        :param int _from: Configure the offset from the frist result you want to fetch
        :param str sort: how to sort the returned datasets. like: path_to_property:[asc|desc]
        :param str filter: filter the search by a defined value in a path. e.g. path_to_property:value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'q', 'format', 'size', '_from', 'sort', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_in_index" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if self.api_client.client_side_validation and ('entity_type' not in params or
                                                       params['entity_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `entity_type` when calling `search_in_index`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entity_type'] = params['entity_type']  # noqa: E501

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{entity_type}/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_over_all_indices(self, **kwargs):  # noqa: E501
        """search over all entity-indices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_over_all_indices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Lucene Query String Search Parameter
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :param str sort: how to sort the returned datasets. like: path_to_property:[asc|desc]
        :param int size: Configure the maxmimum amount of hits to be returned
        :param int _from: Configure the offset from the frist result you want to fetch
        :param str filter: filter the search by a defined value in a path. e.g. path_to_property:value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_over_all_indices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_over_all_indices_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_over_all_indices_with_http_info(self, **kwargs):  # noqa: E501
        """search over all entity-indices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_over_all_indices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Lucene Query String Search Parameter
        :param str format: set the Content-Type over this Query-Parameter. Allowed: nt, rdf, ttl, nq, jsonl, json
        :param str sort: how to sort the returned datasets. like: path_to_property:[asc|desc]
        :param int size: Configure the maxmimum amount of hits to be returned
        :param int _from: Configure the offset from the frist result you want to fetch
        :param str filter: filter the search by a defined value in a path. e.g. path_to_property:value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'format', 'sort', 'size', '_from', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_over_all_indices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
